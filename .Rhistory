# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 160       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 10, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 14, face = "italic"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 5, width = 600, height = 400, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 160       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 12, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 14, face = "italic"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 5, width = 600, height = 400, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 160       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 11, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 14, face = "italic"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 5, width = 600, height = 400, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 160       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 11, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 14, face = "italic"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 5, width = 600, height = 400, res = 500, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 160       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 11, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 14, face = "italic"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 5, width = 1400, height = 865, res = 200, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 150       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 11, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 2, width = 1400, height = 865, res = 200, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 150       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 7  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 11, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 4, width = 1400, height = 865, res = 200, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 150       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 6.5  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 13, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 4, width = 1400, height = 865, res = 200, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
# Set parameters
set.seed(60424)   # For reproducibility
n <- 150       # Number of points
true_mean <- 50 # Constant mean
true_sd <- 10   # Standard deviation
bin_width <- 2  # Histogram bin width
circle_size <- 6.3  # Adjusted circle size
circle_diameter <- .5  # Adjust vertical spacing
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_mean + 13, y = max(data$stack_pos) * 0.9,
label = "True treatment effect = 50", color = "red", size = 5, fontface = "bold") +
theme_minimal() +
xlim(20,80) +
labs(x = "Estimates of the Treatment Effect",
y = "Number of Estimate Replications ") +
ggtitle('Treatment effect estimate if study was replicated {closest_state} times',
subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)) +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 4, width = 1400, height = 865, res = 200, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
citation(gganimate)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
# Animation packages
library(gganimate) # Pederson & Robinson
library(gifski)
library(transformr)
citation(gganimate)
citation("gganimate")
# Set simulation parameters
set.seed(123)  # For reproducibility
n_trials <- 100  # Number of simulated experiments
true_value <- 0  # True effect size (unbiased)
bin_width <- 0.5  # Width of bins for stacking
max_height <- 10  # Max height of stacked marbles
# Simulate estimates (normally distributed around true value)
sim_data <- data.frame(
trial = 1:n_trials,
estimate = rnorm(n_trials, mean = true_value, sd = 1)  # Normal distribution
)
# Bin estimates into discrete x positions (histogram bins)
sim_data <- sim_data %>%
mutate(
bin = round(estimate / bin_width) * bin_width  # Assign to closest bin
) %>%
group_by(bin) %>%
mutate(stack_position = row_number()) %>%  # Assign stack height within each bin
ungroup() %>%
mutate(y_start = 12,  # Initial drop position (top of plot)
y_end = stack_position)  # Final landing position
# Create the animated plot
p <- ggplot(sim_data, aes(x = bin, y = y_start, group = trial)) +
geom_point(size = 5, shape = 21, fill = "blue", color = "black") +  # Marble-like points
theme_minimal() +
ylim(0, max_height + 2) +  # Keep space for falling effect
labs(title = "Unbiased Estimates Stack into a Normal Distribution",
x = "Estimate", y = "Stacking Height") +
transition_reveal(trial) +  # Ensures marbles fall smoothly
ease_aes('cubic-in')  # Falling effect
# Render and save animation
animated_plot <- animate(p, fps = 15, duration = 10, width = 600, height = 400,
, renderer = gifski_renderer())
anim_save("unbiased_estimates.gif")
# Display the animation in RStudio (optional)
animated_plot
# Set parameters
set.seed(123)   # For reproducibility
n <- 500        # Number of points
true_mean <- 50 # True Average Treatment Effect (ATE)
true_sd <- 10   # Standard error
bin_width <- 2  # Histogram bin width
circle_size <- 8  # Increase circle size (~25% larger)
circle_spacing <- 8  # Factor to prevent overlap (slight gap between points)
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_mean, sd = true_sd))
# Bin data into histogram-style bins
data <- data %>%
mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
group_by(bin) %>%
mutate(stack_pos = row_number()) %>%
ungroup() %>%
mutate(frame = row_number())  # Frame number to animate appearance
# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]
# Adjust stacking so circles just touch (scale by circle spacing factor)
data$stack_pos <- data$stack_pos * circle_spacing
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +  # Larger circles
geom_vline(xintercept = true_mean, color = "red", linetype = "dashed", size = 1) +  # True mean line
annotate("text", x = true_mean + 3, y = max(data$stack_pos) * 0.9, label = "μ = 50", color = "red", size = 5, fontface = "bold") +  # Label for mean
theme_minimal() +
labs(title = "Building a Histogram with Stacked Circles",
x = "Value",
y = "Stack Height") +
transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Animate point appearances
shadow_mark(alpha = 1)  # Keep previous points visible
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 10, width = 600, height = 400, renderer = gifski_renderer())
# Save GIF
anim_save("stacked_circle_histogram.gif", animation = animated_histogram)
# Display the animation in RStudio
animated_histogram
