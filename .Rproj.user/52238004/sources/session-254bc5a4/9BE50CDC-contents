---
title: "*Unbiased estimators* - What does it really mean!"
subtitle: "A {gganimate} visualization of an unbiased treatment estimator"
author: "EDS 241"
output: 
    html_document:
      theme: flatly
date: "2025-02-04"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

------------------------------------------------------------------------

### What does it mean when an estimator is said to be "unbiased"? 

**Estimation of the Average Treatment Effect (ATE):**

Under the assumption of random assignment, the estimated treatment effect is said to be *unbiased in expectation*. This means that, on average, across repeated samples, the estimator will converge to the true treatment effect.

An unbiased estimators does not mean that individual point estimates will always be right on the mark. Instead, each estimate from a finite sample will have some variability due to random sampling. This variability is quantified by the standard error (SE).

------------------------------------------------------------------------

**The plot is animated using {`gganimate`}**

Pedersen T, Robinson D (2024). _gganimate: A Grammar of Animated Graphics_. R package version 1.0.9,
  <https://CRAN.R-project.org/package=gganimate>.
  
> [Example Vignette](https://gganimate.com/articles/gganimate.html)

------------------------------------------------------------------------

# Load packages
```{r}
library(ggplot2)
library(tidyverse)
library(gganimate)  # animate 
library(gifski)     # render
library(transformr) # extras
```

------------------------------------------------------------------------

### Set parameters to simulate data & plot

```{r}
set.seed(60424)        # So the simulation reproduces
n <- 150               # Number of estimates (circles)
true_ate <- 50        # True ATE (average treatment effect)
true_se <- 10          # True standard error
bin_width <- 2         # Histogram bin width
circle_size <- 6.3     # Adjust circle size 
circle_diameter <- .5  # Adjust vertical spacing
```

------------------------------------------------------------------------

# Simulate treatment estimate

```{r}
data <- data.frame(value = rnorm(n, mean = true_ate, sd = true_se))
```

### Bin data to plot as histogram

```{r}
data <- data %>%
  mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
  group_by(bin) %>%
  mutate(stack_pos = row_number() * circle_diameter) %>%  # Correct stacking
  ungroup() %>%
  mutate(frame = row_number())  # Frame number to animate appearance

# Define bin centers for correct x-axis alignment
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]

# Determine the max stack height for a fixed y-axis
max_stack_height <- max(data$stack_pos)
```

------------------------------------------------------------------------

### Plot!

```{r}
# Create animated plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
  geom_point(size = circle_size, shape = 21, fill = "white", color = "black") +  
  geom_vline(xintercept = true_ate, color = "red", linetype = "dashed", size = 1) +  # True ATE line
  annotate("text", x = true_ate + 13,  # True ATE label
           y = max(data$stack_pos) * 0.9, 
           label = "True treatment effect = 50",
           color = "red", size = 5, fontface = "bold") +  
  theme_minimal() +
  xlim(20,80) +
  labs(x = "Estimates of the Treatment Effect",
       y = "Number of Estimate Replications ") +
   ggtitle('Treatment effect estimate if study was replicated {closest_state} times', # Display frame num in title!
          subtitle = 'With random assignment the estimator is unbiased (the long run average)') +
  theme(
    plot.title = element_text(size = 16, face = "bold"),      
    plot.subtitle = element_text(size = 12, face = "italic"), 
    axis.title.x = element_text(size = 12), 
    axis.title.y = element_text(size = 12)) + 
  transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Make points appear!
  shadow_mark(alpha = 1) # Keep points visible until end of loop
```

------------------------------------------------------------------------

### Render and save animation

```{r}
animated_histogram <- animate(p, nframes = n,
                              fps = 4, # How fast?
                              width = 1400, height = 865, res = 200,
                              renderer = gifski_renderer())
```

```{r}
# Run gif
animated_histogram
```

```{r, eval=FALSE}
# Save gif
anim_save("unbiased_estimator.gif", animation = animated_histogram)
```

------------------------------------------------------------------------

### Early attempt that kinda works (after many failed attempts!): 

- Too fast (`fps`)
- too many points (`n`)
- Marbles not stacking correctly...
- Couldn't get marbles to fall from the sky - fail :(

------------------------------------------------------------------------

```{r}
# Set parameters
set.seed(123)      
n <- 500           
true_ate <- 50     
true_se <- 10      
bin_width <- 2     
circle_size <- 8   
circle_spacing <- 8
```
  
```{r}
# Simulate data
data <- data.frame(value = rnorm(n, mean = true_ate, sd = true_se))
```

```{r}
# Bin data into histogram-style bins
data <- data %>%
  mutate(bin = cut(value, breaks = seq(min(value), max(value), by = bin_width), labels = FALSE)) %>%
  group_by(bin) %>%
  mutate(stack_pos = row_number()) %>%
  ungroup() %>%
  mutate(frame = row_number()) 

# Define bin centers to align on x-axis
bin_centers <- seq(min(data$value), max(data$value), by = bin_width) + bin_width / 2
data$bin_center <- bin_centers[data$bin]

# Adjust stacking so circles just touch 
data$stack_pos <- data$stack_pos * circle_spacing
```


```{r}
# Plot
p <- ggplot(data, aes(x = bin_center, y = stack_pos)) +
  geom_point(size = circle_size, shape = 21, fill = "white", color = "black") + 
  geom_vline(xintercept = true_ate, color = "red", linetype = "dashed", size = 1) +  # True ATE line
  annotate("text", x = true_ate + 3,
           y = max(data$stack_pos) * 0.9, label = "Î¼ = 50",
           color = "red", size = 5, fontface = "bold") + 
  theme_minimal() +
  labs(title = "Building a Histogram with Stacked Circles",
       x = "Value",
       y = "Stack Height") +
  transition_states(frame, transition_length = 0.1, state_length = 0.1) +  # Make points appear!
  shadow_mark(alpha = 1)  # Make points stay visible until end of loop
```


```{r, eval=FALSE}
# Render and save animation
animated_histogram <- animate(p, nframes = n, fps = 10, width = 600, height = 400, renderer = gifski_renderer())

# Save gif
anim_save("unbiased_early_attempt.gif", animation = animated_histogram)

# Run gif
animated_histogram
```
